#!/bin/sh 
##  Based on the Cray CCM Prologue, Heavily modified by NERSC
# Copyright 2011 Cray Inc.  All Rights Reserved.
# Unpublished Proprietary Information.  This unpublished work is protected 
# to trade secret, copyright and other laws.  Except as permitted by 
# contract or express written permission of Cray Inc., no part of this work 
# or its content may be used, reproduced or disclosed in any form.

jobIdRaw="$1"
jobId=$( echo $jobIdRaw | awk -F. '{print $1}' )
user="$2"
udiRootType="$3"
udiRootValue="$4"
shift 4

nodeContext="/dsl"

volumes=""
while getopts ":v:" opt; do
    case "${opt}" in
        v)
            volumes="${volumes}|${OPTARG}"
            ;;
        \?)
            echo "Invalid option: -${OPTARG}" >&2
            exit 1
            ;;
        :)
            echo "Option -${OPTARG} requires an argument" >&2
            exit 1
            ;;
    esac
done
if [[ -n "${volumes}" ]]; then
    volumes="${volumes:1}" ## remove leading |
fi

udiRootSetupPath=@@@PREFIX@@@
exit_code=0

PATH=${PATH}:/opt/cray/alps/default/bin/

die() {
    local msg
    msg="$1"
    echo "$msg" 1>&2
    exit 1
}

[[ -n "$jobId" ]] || die "Job ID is undefined"
[[ -n "$user" ]]  || die "user is undefined"
[[ -n "$udiRootType" ]] || die "udi image type is undefined"
[[ -n "$udiRootValue" ]] || die "udi image value is undefined"

echo "Initializing udiRoot, please wait."
if [[ "$udiRootType" = "DOCKER" ]]; then
    echo "Retrieving Docker Image"
    image=$( $udiRootSetupPath/bin/getDockerImage.pl -quiet "$udiRootValue" )
    ret=$?
    if [[ -z "$image" || $ret -ne 0 ]]; then
        echo "Failed to get udi image: $UDI_ROOT_VALUE"
        exit 1
    else
        udiRootValue=$image
    fi
fi

datadir="/var/run/udiRoot_jobs/$user/$jobId"
mkdir -p "$datadir"
chmod a+x /var/run/udiRoot_jobs
chmod a+x "/var/run/udiRoot_jobs/$user"
chmod a+x "/var/run/udiRoot_jobs/$user/$jobId"

ssh-keygen -t rsa -f "$datadir/id_rsa.key" -N '' >/dev/null 2>&1
chown "$user" "$datadir/id_rsa.key" "$datadir/id_rsa.key.pub"
chmod 600 "$datadir/id_rsa.key" "$datadir/id_rsa.key.pub"
sshPubKey=$( cat "$datadir/id_rsa.key.pub" )

## stole this from ccm prologue, unsure how it is helpful/useful
xtprocadmin_cmd="/opt/cray/sdb/default/bin/xtprocadmin"
[[ -x "$xtprocadmin_cmd" ]] || die "No xtprocadmin"
"$xtprocadmin_cmd" -E > /dev/null

job_nodelist="$datadir/nodelist.$jobId"
[[ -e "$job_nodelist" ]] && rm -f "$job_nodelist"

job_count=0
max_count=15

reservation=""
if [[ -n "$BASIL_RESERVATION_ID" ]]; then
    reservation="$BASIL_RESERVATION_ID"
else
    while [ $job_count -lt $max_count ] ; do
        reservation=$( apstat -r  | grep "batch:$jobId " | egrep -v "^A" | awk '{print $1}' )
        if [[ -n "$reservation" ]]; then
            break;
        fi
        echo "waiting for reservation identifier"
        sleep 1
        job_count=$(( $job_count + 1))
    done
    [[ $job_count < $max_count ]] || die "Failed to identify job reservation"
fi

[[ -z "$reservation" ]] && die "Failed to identify job reservation"

apstat -rvvv -R $reservation | awk '/^[ ]*PE / { printf "nid%05d\n", $6 }' | sort > $job_nodelist
chmod a+r $job_nodelist

xtxqtcmd_log="$datadir/log.$jobId"
xtxqtcmd="/opt/cray/nodehealth/default/bin/xtxqtcmd"
[[ -x "$xtxqtcmd" ]] || die "Could not find xtxqtcmd. Exiting"

unique_nodes=$datadir/unique_nodes.$jobId
[[ -e "$unique_nodes" ]] && die "nodelist file already exists!"

cat "$job_nodelist" | sort -u > "$unique_nodes"

cmdStr="${nodeContext}/${udiRootSetupPath}/sbin/setupRoot.sh \"$udiRootType\" \"$udiRootValue\" -s \"$sshPubKey\" -u \"$user\""
IFS="|"
for volume in ${volumes}; do
    unset IFS
    cmdStr="$cmdStr -v \"$volume\""
done

echo "$xtxqtcmd $unique_nodes $cmdStr"
"$xtxqtcmd" "$unique_nodes" "$cmdStr" >> $xtxqtcmd_log 2>&1
ok=$( grep "(complete)" $xtxqtcmd_log | wc -l )
expected=$( wc -l "$unique_nodes" )

ret=0
if [[ "$ok" != "$expected" ]]; then
    echo "udiRoot Start FAILURE, $ok of $expected responses"
    ret=1
fi
exit $ret
