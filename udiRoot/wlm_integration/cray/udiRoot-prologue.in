#!/bin/bash
##  Based on the Cray CCM Prologue, Heavily modified by NERSC
# Copyright 2011 Cray Inc.  All Rights Reserved.
# Unpublished Proprietary Information.  This unpublished work is protected 
# to trade secret, copyright and other laws.  Except as permitted by 
# contract or express written permission of Cray Inc., no part of this work 
# or its content may be used, reproduced or disclosed in any form.

jobIdRaw="$1"
jobId=""
user="$2"
userUid=""
udiRootType="$3"
udiRootValue="$4"
mode="alps"
shift 4

nodeContext="/dsl"

volumes=""
image=""
while getopts ":v:m:" opt; do
    case "${opt}" in
        v)
            volumes="${volumes}|${OPTARG}"
            ;;
        m)
            mode="${OPTARG}"
            if [[ -n "$mode" && "$mode" == "local" ]]; then
                nodeContext="";
            fi
            ;;
        \?)
            echo "Invalid option: -${OPTARG}" >&2
            exit 1
            ;;
        :)
            echo "Option -${OPTARG} requires an argument" >&2
            exit 1
            ;;
    esac
done
if [[ -n "${volumes}" ]]; then
    volumes="${volumes:1}" ## remove leading |
fi
context="$nodeContext"
export context

if [[ -z "$context" ]]; then
    export NOCONTEXT="true"
fi

udiRootSetupPath=@@@PREFIX@@@
exit_code=0

PATH=${PATH}:/opt/cray/alps/default/bin/

die() {
    local msg
    msg="$1"
    echo "$msg" 1>&2
    exit 1
}

[[ -n "$jobIdRaw" ]] || die "Job ID is undefined"
[[ -n "$user" ]]  || die "user is undefined"
[[ -n "$udiRootType" ]] || die "udi image type is undefined"
[[ -n "$udiRootValue" ]] || die "udi image value is undefined"

jobId=$( echo "$jobIdRaw" | awk -F. '{print $1}' )
userUid=$( id -u "$user" )

[[ -n "$jobId" ]] || die "Job ID is undefined"
[[ -n "$userUid" ]] || die "user Uid is unknown"

jobEnv=()
entrypoint=""
echo "Initializing udiRoot, please wait."
if [[ "$udiRootType" = "DOCKER" ]]; then
    echo "Retrieving Docker Image"
    data=$($udiRootSetupPath/bin/getDockerImage.pl -quiet lookup "$udiRootValue")
    ret=$?
    IFS=$'\n'
    for item in $data; do
        unset IFS
        if [[ "$item" == "ENV:"* ]]; then
            envItem=$(echo "$item" | cut -c 5-)
            jobEnv+=($envItem)
        elif [[ "$item" == "ENTRY:"* ]]; then
            entrypoint=$(echo "$item" | cut -c 7-)
        else
            image=$item
        fi
    done
    ret=$?
    if [[ -z "$image" || $ret -ne 0 ]]; then
        echo "Failed to get udi image: $UDI_ROOT_VALUE"
        exit 1
    else
        udiRootValue=$image
    fi
fi

datadir="/var/run/udiRoot_jobs/$user/$jobId"
mkdir -p "$datadir"
chmod a+x /var/run/udiRoot_jobs
chmod a+x "/var/run/udiRoot_jobs/$user"
chmod a+x "/var/run/udiRoot_jobs/$user/$jobId"

oldUmask=$(umask)
umask 022

if [[ "$mode" == "local" ]]; then
    sshPubKey=$( su -c "cat ~/.udiRoot/id_rsa.key.pub" "$user" ) 
else
    ssh-keygen -t rsa -f "$datadir/id_rsa.key" -N '' >/dev/null 2>&1
    chown "$user" "$datadir/id_rsa.key" "$datadir/id_rsa.key.pub"
    chmod 600 "$datadir/id_rsa.key" "$datadir/id_rsa.key.pub"
    sshPubKey=$( cat "$datadir/id_rsa.key.pub" )
fi

envFile="$datadir/env";
for envItem in "${jobEnv[@]}"; do
    echo "$envItem" >> "$envFile"
done
if [[ -n "$entrypoint" ]]; then
    echo "$entrypoint" > "$datadir/entrypoint"
fi

## stole this from ccm prologue, unsure how it is helpful/useful
xtprocadmin_cmd="/opt/cray/sdb/default/bin/xtprocadmin"
[[ -x "$xtprocadmin_cmd" ]] || die "No xtprocadmin"
"$xtprocadmin_cmd" -E > /dev/null

job_nodelist="$datadir/nodelist.$jobId"
[[ -e "$job_nodelist" ]] && rm -f "$job_nodelist"

job_count=0
max_count=15

reservation=""
if [[ "$mode" == "local" ]]; then
    reservation="local";
elif [[ -n "$BASIL_RESERVATION_ID" ]]; then
    reservation="$BASIL_RESERVATION_ID"
else
    while [ $job_count -lt $max_count ] ; do
        reservation=$( apstat -r  | grep "batch:$jobId " | egrep -v "^A" | awk '{print $1}' )
        if [[ -n "$reservation" ]]; then
            break;
        fi
        echo "waiting for reservation identifier"
        sleep 1
        job_count=$(( $job_count + 1))
    done
    [[ $job_count < $max_count ]] || die "Failed to identify job reservation"
fi

[[ -z "$reservation" ]] && die "Failed to identify job reservation"

if [[ "$mode" == "local" ]]; then
    hostname > "$job_nodelist"
else
    apstat -rvvv -R "$reservation" | awk '/^[ ]*PE / { printf "nid%05d\n", $6 }' | sort > "$job_nodelist"
fi
chmod a+r "$job_nodelist"

xtxqtcmd_log="$datadir/log.$jobId"
xtxqtcmd="/opt/cray/nodehealth/default/bin/xtxqtcmd"
[[ -x "$xtxqtcmd" ]] || die "Could not find xtxqtcmd. Exiting"

## get list of unique nodes to run setupRoot on
unique_nodes=$datadir/unique_nodes.$jobId
[[ -e "$unique_nodes" ]] && die "nodelist file already exists!"
cat "$job_nodelist" | sort -u > "$unique_nodes"

## minimize nodelist for putting hostsfile on the compute node
minNodes=$( cat "$job_nodelist" | sort | uniq -c | awk '{print $2 "/" $1}' | xargs )

cmdStr="${nodeContext}/${udiRootSetupPath}/sbin/setupRoot.sh \"$udiRootType\" \"$udiRootValue\" -s \"$sshPubKey\" -u \"$user\" -U \"$userUid\" -N \"$minNodes\""
IFS="|"
for volume in ${volumes}; do
    unset IFS
    cmdStr="$cmdStr -v \"$volume\""
done

if [[ "$mode" == "local" ]]; then
    echo $cmdStr > $xtxqtcmd_log
    /bin/sh -c "$cmdStr"
    ok=0
    expected=1
    if [[ $? -eq 0 ]]; then
        ok=1
    fi
else
    echo "$xtxqtcmd $unique_nodes $cmdStr" >> $xtxqtcmd_log
    "$xtxqtcmd" "$unique_nodes" "$cmdStr" >> $xtxqtcmd_log 2>&1
    ok=$( grep "(complete)" $xtxqtcmd_log | wc -l )
    expected=$( cat "$unique_nodes" | wc -l )
fi

ret=0
if [[ "$ok" -eq "$expected" ]]; then
    echo "udiRoot Start FAILURE, $ok of $expected responses"
    ret=1
fi
exit $ret
