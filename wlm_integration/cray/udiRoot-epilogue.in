#!/bin/sh 
##  Based on the Cray CCM Prologue, Heavily modified by NERSC
# Copyright 2011 Cray Inc.  All Rights Reserved.
# Unpublished Proprietary Information.  This unpublished work is protected 
# to trade secret, copyright and other laws.  Except as permitted by 
# contract or express written permission of Cray Inc., no part of this work 
# or its content may be used, reproduced or disclosed in any form.

jobIdRaw="$1"
jobId=$( echo $jobIdRaw | awk -F. '{print $1}' )
user="$2"
shift 2

udiRootSetupPath=@@@PREFIX@@@
nodeContext="/dsl"
mode="alps"

while getopts ":m:" opt; do
    case "${opt}" in
        m)
            mode="${OPTARG}"
            if [[ -n "$mode" && "$mode" == "local" ]]; then
                nodeContext="";
            fi
            ;;
        \?)
            echo "Invalid option: -${OPTARG}" >&2
            exit 1
            ;;
        :)
            echo "Option -${OPTARG} requires an argument" >&2
            exit 1
            ;;
    esac
done
context="$nodeContext"
export context
if [[ -z "$context" ]]; then
    export NOCONTEXT="true"
fi

PATH=${PATH}:/opt/cray/alps/default/bin/

die() {
    local msg
    msg="$1"
    echo "$msg" 1>&2
    exit 1
}

[[ -n "$jobId" ]] || die "Job ID is undefined"
[[ -n "$user" ]]  || die "user is undefined"

datadir="/var/run/udiRoot_jobs/$user/$jobId"

[[ -d "$datadir" ]] || exit

## stole this from ccm prologue, unsure how it is helpful/useful
xtprocadmin_cmd="/opt/cray/sdb/default/bin/xtprocadmin"
[[ -x "$xtprocadmin_cmd" ]] || die "No xtprocadmin"
"$xtprocadmin_cmd" -E > /dev/null

job_nodelist="$datadir/nodelist.$jobId"
[[ -e "$job_nodelist" ]] && rm -f "$job_nodelist"

job_count=0
max_count=15

reservation=""
if [[ "$mode" == "local" ]]; then
    reservation="local"
elif [[ -n "$BASIL_RESERVATION_ID" ]]; then
    reservation="$BASIL_RESERVATION_ID"
else
    while [ $job_count -lt $max_count ] ; do
        reservation=$( apstat -r  | grep "batch:$jobId " | egrep -v "^A" | awk '{print $1}' )
        if [[ -n "$reservation" ]]; then
            break;
        fi
        echo "waiting for reservation identifier"
        sleep 1
        job_count=$(( $job_count + 1))
    done
    [[ $job_count < $max_count ]] || die "Failed to identify job reservation"
fi

[[ -z "$reservation" ]] && die "Failed to identify job reservation"

if [[ "$mode" == "local" ]]; then
    hostname > $job_nodelist
else
    apstat -rvvv -R $reservation | awk '/^[ ]*PE / { printf "nid%05d\n", $6 }' | sort > $job_nodelist
    chmod a+r $job_nodelist
fi

xtxqtcmd_log="$datadir/endlog.$jobId"
xtxqtcmd="/opt/cray/nodehealth/default/bin/xtxqtcmd"
[[ -x "$xtxqtcmd" ]] || die "Could not find xtxqtcmd. Exiting"

unique_nodes=$datadir/unique_nodes.$jobId
cat "$job_nodelist" | sort -u > "$unique_nodes"

cmdStr="${nodeContext}${udiRootSetupPath}/sbin/unsetupRoot"

ok=0
expected=0
if [[ "$mode" == "local" ]]; then
    ok=0
    echo $cmdStr >> $xtxqtcmd_log
    eval $cmdStr
    if [[ $? == 0 ]]; then
        ok=1
    fi
    expected=1
else
    "$xtxqtcmd" "$unique_nodes" "$cmdStr" >> $xtxqtcmd_log 2>&1
    ok=$( grep "(complete)" $xtxqtcmd_log | wc -l )
    expected=$( wc -l "$unique_nodes" )
fi

ret=0
if [[ "$ok" == "$expected" ]]; then
    echo "udiRoot cleanup FAILURE, $ok of $expected responses"
    ret=1
fi
if [[ $ret -eq 0 && -e "$datadir" && "$datadir" != "/" ]]; then
    rm -r "$datadir"
fi
exit $ret
